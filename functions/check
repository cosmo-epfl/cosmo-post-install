#!/bin/bash

dir="$(dirname "$0")"

DEPS="$dir/data/dependencies.list"

# Dependency Check
function check {
    # Now checking sudo privileges
    show_info "Checking if user can run command as superuser..."
    check_sudo
    show_info "Checking which distribution is running..."
    check_release
    # Checking main dependecies
    show_info "Checking dependencies..."
    for package in $(cat $DEPS)
    do 
    PKGCHECK=$(dpkg-query -W --showformat='${Status}\n' $package|grep "install ok installed")
    if [ "" == "$PKGCHECK" ]; then
        show_info "This script makes use of '$package' and it is not present on your system."
        show_question 'Would you like to install it to continue? (Y)es, (N)o : ' && read REPLY
        echo ''
        case $REPLY in
        # Positive action
        [Yy]* ) 
            show_warning 'Requires root privileges'
            sudo apt-get --force-yes -y install $package
            show_success 'Done. Proceeding.'
            ;;
        # Negative action
        [Nn]* )
            show_info "Exiting.."
            clear && exit 99
            ;;
        # Error
        * )
            clear && show_error '\aSorry, try again.' && check
            ;;
        esac
    else
        show_info "'$package' is installed. Proceeding"
    fi
    done
}


function check_exit {
    EXITSTATUS=$1
    if [[ $EXITSTATUS != 0 ]]; then
        show_error "Last command returned an exit status of $EXITSTATUS. Something went wrong (probably 'sudo' privileges or some package needed not found). Aborting."
        sleep 5 && clear && exit 99
    fi
}

function check_sudo {
    if [[ $EUID != 0 ]]; then
        show_warning "You are not log in as root. Checking if current user can use 'sudo'..."
        EXITSTATUS=$(groups $USER | grep -q 'sudo'; echo $?)
        if [[ $EXITSTATUS != 0 ]]; then
            show_error "User invoking this script is not allowed to use 'sudo'. Log in as root or as user with admin privileges."
            sleep 5 && exit 99
        fi
        # Curren user can use 'sudo'
        show_success "Current user can use sudo command! Going on..."
        SUDOCMD="sudo"
        sleep 2
    else
        show_success "You are root, no problems. Going on..."
        SUDOCMD=
        sleep 2
    fi
}

function check_release {
    # This script is meant to work with Ubuntu-based OS, but should be easy to work smoothly also with Debian (a possible future candidate for COSMO workstations)
    EXITSTATUS=$(which lsb_release &>/dev/null; echo $?)
    if [[ $EXITSTATUS != 0 ]]; then
        show_error "It seems there's no 'lsb_release' command to check for the distribution! Aborting."
        sleep 2 && exit 99
    else
        RELEASE=$(lsb_release -ds | awk '{print $1}')
        case $RELEASE in
            "Ubuntu")
                UFLAG=true
                show_info "Running Ubuntu or Ubuntu-based distribution, OK ..."; sleep 2
                ;;
            "Debian")
                show_info "Running Debian, using different packages' list and configs ..."; sleep 2
                ;;
            *)
                show_warning "Distribution not recognized! You might encounter problems running this script. Aborting."; sleep 2 && exit 99
        esac
    fi
}
